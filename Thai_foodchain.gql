GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Tiger'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Leopard'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Dhole'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Jackal'}) SET x.id = ID(x)"

GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Elephant'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Gaur'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Deer'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Tapir'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Macaque'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Weasel'}) SET x.id = ID(x)"

GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Pangolin'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Treeshrew'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Animal {name:'Frog'}) SET x.id = ID(x)"

GRAPH.QUERY test_foodchain "CREATE (x:Insect {name:'Ant'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Insect {name:'Butterfly'}) SET x.id = ID(x)"

GRAPH.QUERY test_foodchain "CREATE (x:Plant {name:'Tree'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Plant {name:'Fruit'}) SET x.id = ID(x)"
GRAPH.QUERY test_foodchain "CREATE (x:Plant {name:'Grass'}) SET x.id = ID(x)"

GRAPH.QUERY test_foodchain "MATCH (n{name:'Tiger'}),(m{name:'Dhole'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Tiger'}),(m{name:'Gaur'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Tiger'}),(m{name:'Deer'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Tiger'}),(m{name:'Tapir'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Tiger'}),(m{name:'Leopard'}) CREATE (n)-[:Eat]->(m)"

GRAPH.QUERY test_foodchain "MATCH (n{name:'Leopard'}),(m{name:'Deer'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Leopard'}),(m{name:'Tapir'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Leopard'}),(m{name:'Macaque'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Leopard'}),(m{name:'Jackal'}) CREATE (n)-[:Eat]->(m)"

GRAPH.QUERY test_foodchain "MATCH (n{name:'Dhole'}),(m{name:'Gaur'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Dhole'}),(m{name:'Deer'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Dhole'}),(m{name:'Macaque'}) CREATE (n)-[:Eat]->(m)"

GRAPH.QUERY test_foodchain "MATCH (n{name:'Jackal'}),(m{name:'Tapir'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Jackal'}),(m{name:'Macaque'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Jackal'}),(m{name:'Treeshrew'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Jackal'}),(m{name:'Weasel'}) CREATE (n)-[:Eat]->(m)"

GRAPH.QUERY test_foodchain "MATCH (n{name:'Elephant'}),(m{name:'Tree'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Elephant'}),(m{name:'Fruit'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Gaur'}),(m{name:'Grass'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Deer'}),(m{name:'Grass'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Macaque'}),(m{name:'Fruit'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Tapir'}),(m{name:'Ant'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Pangolin'}),(m{name:'Ant'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Weasel'}),(m{name:'Treeshrew'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Weasel'}),(m{name:'Frog'}) CREATE (n)-[:Eat]->(m)"

GRAPH.QUERY test_foodchain "MATCH (n{name:'Treeshrew'}),(m{name:'Ant'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Frog'}),(m{name:'Ant'}) CREATE (n)-[:Eat]->(m)"
GRAPH.QUERY test_foodchain "MATCH (n{name:'Frog'}),(m{name:'Butterfly'}) CREATE (n)-[:Eat]->(m)"
